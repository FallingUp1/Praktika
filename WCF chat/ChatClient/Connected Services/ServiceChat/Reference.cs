//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IService1", CallbackContract=typeof(ChatClient.ServiceChat.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Connect", ReplyAction="http://tempuri.org/IService1/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Connect", ReplyAction="http://tempuri.org/IService1/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Disconnect", ReplyAction="http://tempuri.org/IService1/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Disconnect", ReplyAction="http://tempuri.org/IService1/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/SendMsg")]
        void SendMsg(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string msg, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListUsers", ReplyAction="http://tempuri.org/IService1/ListUsersResponse")]
        string[] ListUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ListUsers", ReplyAction="http://tempuri.org/IService1/ListUsersResponse")]
        System.Threading.Tasks.Task<string[]> ListUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Lichka", ReplyAction="http://tempuri.org/IService1/LichkaResponse")]
        int Lichka(string human);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Lichka", ReplyAction="http://tempuri.org/IService1/LichkaResponse")]
        System.Threading.Tasks.Task<int> LichkaAsync(string human);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMessagePrivate", ReplyAction="http://tempuri.org/IService1/SendMessagePrivateResponse")]
        void SendMessagePrivate(string message, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMessagePrivate", ReplyAction="http://tempuri.org/IService1/SendMessagePrivateResponse")]
        System.Threading.Tasks.Task SendMessagePrivateAsync(string message, string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/update", ReplyAction="http://tempuri.org/IService1/updateResponse")]
        string[] update(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/update", ReplyAction="http://tempuri.org/IService1/updateResponse")]
        System.Threading.Tasks.Task<string[]> updateAsync(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchDialog", ReplyAction="http://tempuri.org/IService1/SearchDialogResponse")]
        string SearchDialog(string user_1, string user_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchDialog", ReplyAction="http://tempuri.org/IService1/SearchDialogResponse")]
        System.Threading.Tasks.Task<string> SearchDialogAsync(string user_1, string user_2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/MsgCallBack")]
        void MsgCallBack(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ChatClient.ServiceChat.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<ChatClient.ServiceChat.IService1>, ChatClient.ServiceChat.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMsg(string msg, int id) {
            base.Channel.SendMsg(msg, id);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string msg, int id) {
            return base.Channel.SendMsgAsync(msg, id);
        }
        
        public string[] ListUsers() {
            return base.Channel.ListUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> ListUsersAsync() {
            return base.Channel.ListUsersAsync();
        }
        
        public int Lichka(string human) {
            return base.Channel.Lichka(human);
        }
        
        public System.Threading.Tasks.Task<int> LichkaAsync(string human) {
            return base.Channel.LichkaAsync(human);
        }
        
        public void SendMessagePrivate(string message, string url) {
            base.Channel.SendMessagePrivate(message, url);
        }
        
        public System.Threading.Tasks.Task SendMessagePrivateAsync(string message, string url) {
            return base.Channel.SendMessagePrivateAsync(message, url);
        }
        
        public string[] update(string url) {
            return base.Channel.update(url);
        }
        
        public System.Threading.Tasks.Task<string[]> updateAsync(string url) {
            return base.Channel.updateAsync(url);
        }
        
        public string SearchDialog(string user_1, string user_2) {
            return base.Channel.SearchDialog(user_1, user_2);
        }
        
        public System.Threading.Tasks.Task<string> SearchDialogAsync(string user_1, string user_2) {
            return base.Channel.SearchDialogAsync(user_1, user_2);
        }
    }
}
